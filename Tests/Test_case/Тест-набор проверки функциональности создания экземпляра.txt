Тест-набор проверки работы функциональности создания экземпляра.


Additional info: 
	url=http://rest.test.ivi.ru/v2/character
	headers={
		‘Content-Type’:’aplication/json’}
	auth=(‘Volkov.denis.vad@yandex.ru’,’hgJH768Cv23’)

	Названием теста выступает его полное имя в тестовом фреймворке. (Для удобства запуска)



	1.Проверка доступности метода у ресурса: 

		1.1 Tests/create_instance.py::Test_create_instance::test_access_resource_method[basic-None-200]
		
			Описание: Метод POST должен быть доступен на url только авторизованным пользователям. 

			Метод: POST

			json={'name': 'Случайное валидное имя'}
		
			auth=(‘Volkov.denis.vad@yandex.ru’,’hgJH768Cv23’)
		
			Ожидаемый результат : Код ответа с данными параметрами - 400

		1.2 Tests/create_instance.py::Test_create_instance::test_access_resource_method[invalid auth-auth1-401]

			Описание: Метод POST должен быть доступен на url только авторизованным пользователям. 

			Метод: POST

			json={'name': 'Случайное валидное имя'}
		
			auth=(‘awdawdawd’,'awd')
		
			Ожидаемый результат : Код ответа с данными параметрами - 401

	2.Запросы на создание экземпляра с некорректными данными: 

		2.1 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test0]

			Описание: Сервер должен принимать только корректные значения передаваемого тела. 

			Метод: POST

			json=[]
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : _schema: ['Invalid input type.']

		2.2 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test1]

			Описание: Сервер должен принимать только корректные значения передаваемого тела. 

			Метод: POST

			json=None
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : "Payload must be a valid json"

		2.3 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test2]
		
			Описание: Сервер должен принимать только корректные значения передаваемого имени. Пустая строка в имени. 

			Метод: POST

			json={'name':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Length must be between 1 and 350.']

		2.4 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test3]
		
			Описание: Сервер должен принимать только корректные значения передаваемого имени. 

			Метод: POST

			json={'name':[]}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Not a valid string.']

		2.5 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test4]
	
			Описание: Сервер должен принимать только корректные значения передаваемого имени. 

			Метод: POST

			json={}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Missing data for required field.']

		2.6 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test5]

			Описание: Сервер должен принимать только корректные значения передаваемого имени. 

			Метод: POST

			json={'name':'s'*351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Length must be between 1 and 350.']

		2.7 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test6]

			Описание: Сервер должен принимать только корректные значения передаваемого имени. 
			В данном тесте в имени 2 пробела - Сервер не должен хранить пустые значения.

			Метод:POST

			json={'name':' '}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Not a valid string.']

		2.8 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test7]

			Описание: Сервер должен принимать только корректные значения передаваемого имени. 

			Метод: POST

			json={'name':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : name: ['Field may not be null.']


		2.9 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test8]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства education. Пуста строка
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'education':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : education: ['Length must be between 1 and 350.']

		2.10 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test9]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства education. 
		
			Метод:POST

			json={'name':'Валидное случайное имя', 'education':[]}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : education: ['Not a valid string.']

		2.11 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test10]
	
			Описание: Сервер должен принимать только корректные значения передаваемого свойства education. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'education':'s' * 351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : education: ['Length must be between 1 and 350.']

		2.12 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test11]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства education. Строка с одним пробелом.
			Сервер не должен хранить пустые значения.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'education':' '}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : education: ['Not a valid string.']

		2.13 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test12]
			
			Описание: Сервер должен принимать только корректные значения передаваемого свойства education. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'education':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : education: ['Field may not be null.']

		2.14 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test13]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства identity.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'identity':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : identity: ['Length must be between 1 and 350.']

		2.15 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test14]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства identity.
		
			Метод:POST

			json={'name':'Валидное случайное имя', 'identity':[]}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : identity: ['Not a valid string.']

		2.16 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test15]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства identity.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'identity':'s'*351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : identity: ['Length must be between 1 and 350.']

		2.17 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test16]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства identity. Пустая строка c пробелом.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'identity':' '}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : identity: ['Not a valid string.']

		2.18 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test17]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства identity. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'identity':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : identity: ['Field may not be null.']

		2.19 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test18] 
			
			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. Пустая строка.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Length must be between 1 and 350.']

		2.20 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test18]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':[]}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Not a valid string.']

		2.21 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test19]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':'s'*351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Length must be between 1 and 350.']

		2.22 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test20] 

			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':'s'*351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Length must be between 1 and 350.']


		2.23 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test21] 

			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. Один пробел.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':' '}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Not a valid string.']

	
		2.24 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test22] 

			Описание: Сервер должен принимать только корректные значения передаваемого свойства other_aliases. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'other_aliases':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : other_aliases: ['Field may not be null.']

		2.25 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test23]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства universe. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'universe':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : universe: ['Length must be between 1 and 350.']

		2.26 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test24]
			
			Описание: Сервер должен принимать только корректные значения передаваемого свойства universe. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'universe':[]}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : universe: ['Not a valid string.']

		2.27 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test25]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства universe. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'universe':'s'*351}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : universe: ['Length must be between 1 and 350.']

		2.28 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test26] 

			Описание: Сервер должен принимать только корректные значения передаваемого свойства universe. Один пробел. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'universe':' '}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : universe: ['Not a valid string.']]


		2.29 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test27]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства universe. Один пробел. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'universe':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : universe: ['Field may not be null.']


		2.30 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test28]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства weight. Пустая строка
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'weight':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : weight: ['Not a valid number.']

 
		2.31  Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test29]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства weight. Пустая строка
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'weight':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : weight: ['Field may not be null.']

		2.32 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test30]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства height. Рост не может быть отрицательным.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'height':-1}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : height: ['Not a valid number.']


		2.33 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test31]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства height. 
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'height':''}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : height: ['Not a valid number.']

		2.34 Tests/create_instance.py::Test_create_instance::test_negative_create_instance[data_negative_test32]

			Описание: Сервер должен принимать только корректные значения передаваемого свойства height.
		
			Метод: POST

			json={'name':'Валидное случайное имя', 'height':None}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : height: ['Field may not be null.']


3. Запросы на создание экземпляра с корректными данными: 

		3.1 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test4]

			Описание: Сервер должен принимать корректные изменения параметра education.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'education':'r'}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.2 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test5] 

			Описание: Сервер должен принимать корректные изменения параметра education. 
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'education':'r'*350}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.3 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test6]

			Описание: Сервер должен принимать корректные изменения параметра education. 
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'education':'r'*349}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.4 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test7]

			Описание: Сервер должен принимать корректные изменения параметра education. 
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'education':'"! # $ % & ‘ * + — / = ? ^ _ ` { | } ~"'}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.5 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test8]

			Описание: Сервер должен принимать корректные изменения параметра identity.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'identity':'r'}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.6 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test9]

			Описание: Сервер должен принимать корректные изменения параметра identity.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'identity':'r'*350}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.7 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test10] 
			
			Описание: Сервер должен принимать корректные изменения параметра identity.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'identity':'r'*349}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.8 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test11]  

			Описание: Сервер должен принимать корректные изменения параметра identity.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'identity':'"! # $ % & ‘ * + — / = ? ^ _ ` { | } ~"'}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.9 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test12]

			Описание: Сервер должен принимать корректные изменения параметра other_aliases.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'other_aliases':'r'}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.10 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test13] 

			Описание: Сервер должен принимать корректные изменения параметра other_aliases.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'other_aliases':'r'*350}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.11 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test14] 

			Описание: Сервер должен принимать корректные изменения параметра other_aliases.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'other_aliases':'r'*349}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.12 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test15]

			Описание: Сервер должен принимать корректные изменения параметра other_aliases.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'other_aliases':'"! # $ % & ‘ * + — / = ? ^ _ ` { | } ~"'}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.13 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test16]

			Описание: Сервер должен принимать корректные изменения параметра universe.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'universe':'r'}
			
			Ожидаемый результат : Код ответа на запрос - 200
			

		3.14 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test17]

			Описание: Сервер должен принимать корректные изменения параметра universe.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'universe':'r'*350}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.15 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test18]

			Описание: Сервер должен принимать корректные изменения параметра universe.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'universe':'r'*349}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.16 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test19] 

			Описание: Сервер должен принимать корректные изменения параметра universe.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'universe':'"! # $ % & ‘ * + — / = ? ^ _ ` { | } ~"'}
			
			Ожидаемый результат : Код ответа на запрос - 200
			

		3.17 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test20]
			
			Описание: Сервер должен принимать корректные изменения параметра weight.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'weight':1}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.18 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test21]

			Описание: Сервер должен принимать корректные изменения параметра weight.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'weight':1.55}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.19 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test22]

			Описание: Сервер должен принимать корректные изменения параметра weight.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'weight':0}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.20 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test23]

			Описание: Сервер должен принимать корректные изменения параметра weight.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'weight':-1}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.21 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test24]

			Описание: Сервер должен принимать корректные изменения параметра height.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'height':0}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.22 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test25]

			Описание: Сервер должен принимать корректные изменения параметра height.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'height':0.55}
			
			Ожидаемый результат : Код ответа на запрос - 200


		3.23 Tests/modify_instance.py::Test_modify_instance::test_positive_modify_instance[data_positive_test26]
		
			Описание: Сервер должен принимать корректные изменения параметра height.
		
			Метод: PUT

			json={'name':'Валидное случайное имя', 'height':1}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.24 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test0] 

			Описание: Сервер должен принимать корректные изменения параметра name.
		
			Метод: POST

			json={'name':'r'}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.25 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test1]
		
			Описание: Сервер должен принимать корректные изменения параметра name.
		
			Метод: POST

			json={'name':'r'*350}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.26 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test2]
		
			Описание: Сервер должен принимать корректные изменения параметра name.
		
			Метод: POST

			json={'name':'r'*349}
			
			Ожидаемый результат : Код ответа на запрос - 200

		3.27 Tests/create_instance.py::Test_create_instance::test_positive_create_instance[data_positive_test3] 

			Описание: Сервер должен принимать корректные изменения параметра name.
		
			Метод: POST

			json={'name':'"! # $ % & ‘ * + — / = ? ^ _ ` { | } ~"'}
			
			Ожидаемый результат : Код ответа на запрос - 200


4.Запросы на создание ублирующего экземпляра с корректными данными: 

		4.1 Tests/create_instance.py::Test_create_instance::test_duplicate_create_instance[data_duplicate_test0]

		Precondition : Создать экземпляр со следующими параметрами : {'name':'Test duplicate name'}
		
		Описание: Сервер должен корреткно проверять данные, для отсутствия возможности создания дубликата экземпляра.
		
			Метод: POST

			json={'name':'Test duplicate name'}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : Test duplicate name is already exists

5. Серия запросов на создание экземпляров для тестирования ситуации переполнености базы

		5.1 Tests/create_instance.py::Test_create_instance::test_creation_limit_instance

		Precondition: 	1. Узнать кол-во элементов в базе
				2. Создать серию экземпляров в количестве (Максимальное кол-во элементов в базе - Число из пункта 1)
		 
		 Описание: Сервер должен корреткно проверять кол-во элементов в базе и уведомлять о её переполнении.
		
			Метод: POST

			json={'name':'Случайное валидное имя'}
			
			Ожидаемый результат : Код ответа на запрос - 400, Ошибка : Collection can't contain more than 500 items
			
		

		

			

